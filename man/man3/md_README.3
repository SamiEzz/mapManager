.TH "md_README" 3 "Mon Aug 6 2018" "TwIRTee mapManager" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_README \- Introduction :octocat: 
This program give you several functions to read a json file containing map information\&. Below the main functions that you will use : 
.SS "Main functions"
.PP
Return type  Function(parameters)   struct Beacons  beaconsExt(char *_JSON_STRING,initParser _IP,int _i,int objRank);   struct Waypoints  waypointsExt(char *_JSON_STRING,initParser _IP,int _i,int objRank);   struct Legs  legsExt(char *_JSON_STRING,initParser _IP,int _i,int objRank);   struct Constraints  ConstrExt(char *_JSON_STRING,initParser _IP,int _i,int objRank);   struct Constants  CstExt(char *_JSON_STRING,initParser _IP,int _i);   
.PP
.SS "Parameters"
.PP
Parameter  Purpose   char *_JSON_STRING  This is a pointer to a memory bloc that contain the json file\&. using 'fread()'   initParser _IP  initiated by 'getJsonToken()',   **_IP\&.r** : number of objects parsed   **_IP\&.t** : token pointer to the address of each object in \fBJSON_STRING\fP   **_IP\&.p** : json parser :: not used for now   int _i  represent rank of json object inside the token \fBt\fP 't[_i]'   int objRank  used to populate the same structure in a \fBfor\fP loop   
.PP
.SH "How to use :"
.PP
.PP
.IP "1." 4
include '**header\&.h**' and '**jsmn\&.h**'
.IP "2." 4
make sure that you fill this variables :
.PP
.IP "\(bu" 2
int \fBexpectNvalues\fP : more than 6000
.IP "\(bu" 2
char * \fBjsonFileName\fP : can't be more clear
.IP "\(bu" 2
char * \fBJSON_STRING\fP : pointer to a memory bloc (Cf\&. Extra instructions \fCJSON_STRING\fP)
.IP "\(bu" 2
initParser \fBIP\fP = getJsonToken(expectNvalues,JSON_STRING) 
.br
* int \fBr\fP = IP\&.r
.IP "\(bu" 2
jsmntok * \fBt\fP = IP\&.t
.PP
.IP "3." 4
Compute occurance of objects: Cf\&. Annexe\&.(Compute Occurance)
.IP "4." 4
Create structures Cf\&. Annexe\&.(Create Structs)
.IP "5." 4
loop over all json objects and fill structures Cf\&. Annexe\&.(Populate structures loop)
.PP
.PP
.SH "Annexe"
.PP
.PP
.SS "JSON_STRING :"
.PP
to fill this bloc, use this clasic olgorithme :
.PP

.br
 FILE *f = fopen(jsonFileName, 'r'); if (f){ fseek(f,0,SEEK_END); length= ftell(f); fseek(f,0,SEEK_SET); JSON_STRING = malloc(length); if (JSON_STRING){ fread(JSON_STRING,1,length,f); } fclose(f); }; 
.SS "Compute Occurance"
.PP
int Boccur = objectOccurance(stBeaconid,JSON_STRING, IP); 
.br
 int Wpoccur = objectOccurance(stwpid,JSON_STRING, IP); int lgoccur = objectOccurance(stlegId,JSON_STRING, IP); int ctoccur = objectOccurance(stCid,JSON_STRING, IP); 
.SS "Create structs"
.PP
.PP
.nf
struct Beacons B[Boccur];
struct Waypoints Wp[Wpoccur];
struct Legs lg[lgoccur];
struct Constraints ct[ctoccur];
struct Constants c;
.fi
.PP
.PP
.SS "Populate structures loop :"
.PP
this code check all objects of the map\&.json file and fill the corresponding structure 
.br
.PP
.nf
for (i =  1; i < r; i++) {
    if (jsoneq(JSON_STRING, &t[i], stLegs) ==  0) {
        for(int in=0;in<lgoccur;in++){
            lg[in]=legsExt(JSON_STRING,IP,i,in);
        }
    }
    else  if (jsoneq(JSON_STRING, &t[i], stBeacons) ==  0) {
        for(int in=0;in<Boccur;in++){
            B[in]=beaconsExt(JSON_STRING,IP,i,in);
        }
    }
    else  if (jsoneq(JSON_STRING, &t[i], stWaypoints) ==  0) {
        for(int in=0;in<Wpoccur;in++){
            Wp[in]=waypointsExt(JSON_STRING,IP,i,in);
        }
    }
    else  if (jsoneq(JSON_STRING, &t[i], stConstraints) ==  0) {
        for(int in=0;in<=ctoccur;in++){
            ct[in]=ConstrExt(JSON_STRING,IP,i,in);
        }
    }
    else  if (jsoneq(JSON_STRING, &t[i], stConstants) ==  0) {
        c =  CstExt(JSON_STRING,IP,i);
    }
    else{}
}
.fi
.PP
 
